{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#IS 211 Assignment 3\n",
    "\n",
    "import urllib.request\n",
    "from io import StringIO\n",
    "import csv\n",
    "import re \n",
    "import argparse\n",
    "import datetime\n",
    "\n",
    "# Part 1\n",
    "def downloadData(url):\n",
    "    content=urllib.request.urlopen(url).read().decode(\"ascii\",\"ignore\") \n",
    "    return content\n",
    "\n",
    "# Part 2\n",
    "def processData(file):\n",
    "    data=StringIO(file)\n",
    "    csv_reader = csv.reader(data, delimiter=',')\n",
    "    next(csv_reader)\n",
    "    dataList=[] \n",
    "    for line in csv_reader:\n",
    "        dataList.append(line)\n",
    "    return dataList \n",
    "\n",
    "imageBroswerList=[] \n",
    "\n",
    "#part 3\n",
    "def imageHits(dataList):\n",
    "    count=0\n",
    "    imageCount=0 \n",
    "    \n",
    "    for line in dataList: \n",
    "        extensionList=re.findall('([^\\s]+(\\.(?i)(jpg|png|gif|bmp))$)',line[0]) \n",
    "        \n",
    "        if len(extensionList)>0: \n",
    "            imageCount+=1 \n",
    "            imageBroswerList.append(line)\n",
    "            \n",
    "        count+=1 \n",
    "    \n",
    "    imagePercentage=(imageCount/count)* 100  \n",
    "    imagePercentage=round(imagePercentage,1) \n",
    "    print(\"Image requests account for {} % of all requests\".format(imagePercentage)) \n",
    "\n",
    "\n",
    "#part 4\n",
    "def browserType(imageBroswerList=imageBroswerList):\n",
    "    \"\"\"Function to Finding Most Popular Browser\"\"\"\n",
    "    browserCounts={} \n",
    "    browserList=[] \n",
    "    for line in imageBroswerList:\n",
    "        browserType=re.findall(\"(?i)(firefox|msie|chrome|safari)[/\\s]([\\d.]+)\", line[2]) \n",
    "        \n",
    "        browserList.append(browserType) \n",
    "    for broswers in browserList:\n",
    "        if broswers[0][0] not in browserCounts:\n",
    "            browserCounts[broswers[0][0]]=1 \n",
    "        else:\n",
    "            browserCounts[broswers[0][0]]+=1 \n",
    "    \n",
    "    browserTup=list()  \n",
    "    for key, value in list(browserCounts.items()):\n",
    "        browserTup.append((value,key))\n",
    "    \n",
    "    browserTup.sort(reverse=True) \n",
    "\n",
    "    print(\"The most popular browser is {} with {} hits\".format(browserTup[0][1], browserTup[0][0]))\n",
    "\n",
    "#Extra credit\n",
    "def hourHits(dataList):\n",
    "\n",
    "    hitsDict={}\n",
    "    for data in dataList:\n",
    "        hours= datetime.datetime.strptime(data[1], '%Y-%m-%d %H:%M:%S').hour \n",
    "        if hours not in hitsDict:\n",
    "            hitsDict[hours]=1\n",
    "        else:\n",
    "            hitsDict[hours]+=1\n",
    "\n",
    "    hitsTup=list() \n",
    "    for key, value in list(hitsDict.items()):\n",
    "        hitsTup.append((value,key)) \n",
    "    \n",
    "    hitsTup.sort(reverse=True) \n",
    "    for i,value in hitsTup:\n",
    "        print(\"Hour {} has {} hits\".format(value, i)) \n",
    "\n",
    "\n",
    "\n",
    "def main():\n",
    "    commandParser = argparse.ArgumentParser(description=\"Send a ­­url parameter to the script\")\n",
    "    commandParser.add_argument(\"--url\", type=str, help=\"Link to the csv file\")\n",
    "    args = commandParser.parse_args()\n",
    "    if not args.url:\n",
    "        exit()\n",
    "    \n",
    "    try:\n",
    "        csvData=downloadData(args.url)\n",
    "    except:\n",
    "        \n",
    "        print(\"An error has occured. Please try again\")\n",
    "        exit()\n",
    "    \n",
    "    browserData=processData(csvData)\n",
    "    image=imageHits(browserData)\n",
    "    browserType()\n",
    "    hourHits(browserData)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
